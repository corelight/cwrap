use strict;
use Test::More;

$|++;

printf qq[- test: strategy: build common source code in all combinations of C / C++, without / with curt / with long cwrap, few / many gcc commands, O0 / 1 / 2 / 3 gcc optimization\n];

printf qq[- test: wiping folder: build/\n];
printf qq[  - test: rmdir folder: build/\n] if ($ARGV[0] =~ m~debug~i); `rm -rf build/`;
printf qq[  - test: mkdir folder: build/\n] if ($ARGV[0] =~ m~debug~i); `mkdir  build/`;

my $mak_all = "all:";
my $mak_targets;
foreach my $pass (1..2) {
    foreach my $number (1..1) {
        foreach my $language (qw(c---example cpp-example)) {
            foreach my $cwrap (qw(exclude----- include-curt include-long)) {
                foreach my $make (qw(via-1-line via-n-line)) {
                    foreach my $opt (qw(O0 O1 O2 O3)) {
                        #next if($opt !~ m~O0~);

                        my $build_folder = sprintf qq[language-%s-%d-cwrap-%s-make-%s-opt-%s], $language, $number, $cwrap, $make, $opt;
                        my $build_path   = sprintf qq[build/%s], $build_folder;

                        if (1 == $pass) {
                            my $cc;
                               $cc = qq[ CC="perl ../../../cwrap.pl -DCWRAP_LOG_CURT=1"] if ($cwrap eq 'include-curt');
                               $cc = qq[ CC="perl ../../../cwrap.pl -DCWRAP_LOG_CURT=0"] if ($cwrap eq 'include-long');
                            my $build_command = sprintf qq[cd %s ; (time make -f %s-%d.%s.mak OPT="-%s"%s) > build.log 2>&1], $build_folder, $language, $number, $make, $opt, $cc;

                            $mak_all     .= sprintf qq[ %s/run.log], $build_folder;
                            $mak_targets .= sprintf  qq[%s/run.log:\n\t%s\n\n], $build_folder, $build_command;

                            if(not -e $build_path) { printf qq[  - test: mkdir %s\n], $build_path if ($ARGV[0] =~ m~debug~i); `mkdir $build_path`; die qq[ERROR: test: build folder not created!\n] if(not -e $build_path); }

                            printf qq[  - test: copy example source files\n] if ($ARGV[0] =~ m~debug~i); `cp c*example-*.* $build_path/.`;

                            #`echo foo >> $build_path/cpp-example.1.cpp` $build_folder eq 'language-cpp-example-cwrap-include-make-via-n-line-opt-O3'); # cause a build to fail!
                        } # if (1 == $pass)

                        if (2 == $pass) {
                            my $compare_file = sprintf qq[%s-%d.%s.output.txt], $language, $number, $cwrap;
                            my $compare_command = sprintf qq[diff --brief %s %s/run.log], $compare_file, $build_path;
                            printf qq[  - test: running: %s\n], $compare_command if ($ARGV[0] =~ m~debug~i);
                            my $output = `$compare_command 2>&1`;

                            my $success = ($output =~ m~^\s*$~i) ? 1 : 0;
                            if (0 == $success) {
                                my $build_output = `cat $build_path/build.log`;
                                   $build_output =~ s~^(.*)$~> $1~gm;
                                   $build_output =~ s~\s+$~~s;
                                printf qq[%s\n], $build_output;
                                printf qq[- test: diff command failed: %s\n], $compare_command;
                                $output =~ s~^(.*)$~> $1~gm;
                                $output =~ s~\s+$~~s;
                                printf qq[%s\n], $output;
                            }
                            ok($success, "test: " . $build_path);
                            exit(1) if (0 == $success);
                        } # if (2 == $pass)
                    } # foreach my $opt
                } # foreach my $make
            } # foreach my $cwrap
        } # foreach my $language
    } # foreach my $number
    if (1 == $pass) {
        my $mak_file = sprintf qq[build/makefile];
        open(MAK, '>', $mak_file) || die sprintf qq[ERROR: test: cannot open file for writing: %s; $!\n], $mak_file;
        printf MAK qq[%s\n\n], $mak_all;
        printf MAK qq[%s\n\n], $mak_targets;
        close MAK;

        my $make_command = sprintf qq[cd build ; make -j 2>&1];
        printf qq[- test: running: %s\n], $make_command;
        my $output = `$make_command`;
           $output =~ s~^(.*)$~> $1~gm;
           $output =~ s~\s+$~~s;
        printf qq[%s\n], $output;
    }
} # foreach my $pass

my $check_rbp_command = sprintf qq[find build/ -type f | sort | egrep "\.a.s.2.s" | xargs egrep "movq.*cwrap_data_" | egrep -v rdi];
printf qq[  - test: running: %s\n], $check_rbp_command if ($ARGV[0] =~ m~debug~i);
my $output = `$check_rbp_command 2>&1`;
my $success = ($output =~ m~, \%rbp~i) ? 1 : 0; # e.g. leaq cwrap_data_bar(%rip), %rbp
ok($success, "test: as expected, at least one build has 'movq cwrap_data_.*, \%rxx' where rxx is not rdi");

require "../cwrap.pl";
my $expected = q[(&std::forward<>()) [9]]                                                                                                                 ; compress_demangled_name(q[char const (&std::forward<char const (&) [9]>(std::remove_reference<char const (&) [9]>::type&)) [9]], $expected);
my $expected = q[caf::data_processor<>::apply()::{unnamed-type}::operator()]                                                                              ; compress_demangled_name(q[caf::data_processor<caf::serializer>::apply(bool&)::{unnamed type#1}::operator()(unsigned char&, bool&) const], $expected);
my $expected = q[(*std::_Any_data::_M_access<>())]                                                                                                        ; compress_demangled_name(q[void (* const&std::_Any_data::_M_access<void (*)(caf::scheduled_actor*, caf::error&)>() const)(caf::scheduled_actor*, caf::error&)], $expected);
my $expected = q[delete_each<>]                                                                                                                           ; compress_demangled_name(q[void delete_each<std::vector<BroSubstring*, std::allocator<BroSubstring*> > >(std::vector<BroSubstring*, std::allocator<BroSubstring*> >*)], $expected);
my $expected = q[caf::detail::tuple_inspect_delegate<>]                                                                                                   ; compress_demangled_name(q[decltype ({parm#2}((get<0ul>)({parm#1}))) caf::detail::tuple_inspect_delegate<3ul, 0ul, std::tuple<caf::actor>, caf::deserializer>(std::tuple<caf::actor>&, caf::deserializer&)], $expected);
my $expected = q[(&std::forward<>())]                                                                                                                     ; compress_demangled_name(q[void (&std::forward<void (&)(caf::scheduled_actor*, caf::error&)>(std::remove_reference<void (&)(caf::scheduled_actor*, caf::error&)>::type&))(caf::scheduled_actor*, caf::error&)], $expected);
my $expected = q[caf::(anonymous-namespace)::fill_builtins]                                                                                               ; compress_demangled_name(q[caf::(anonymous namespace)::fill_builtins(std::array<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::function<std::unique_ptr<caf::type_erased_value, std::default_delete<caf::type_erased_value> > ()> >, 43ul>&, caf::detail::type_list<>, unsigned long)], $expected);
my $expected = q[broker::core_actor()::{lambda()}::operator()()::{lambda()}::operator()]                                                                  ; compress_demangled_name(q[broker::core_actor(caf::stateful_actor<broker::core_state, caf::event_based_actor>*, std::vector<broker::topic, std::allocator<broker::topic> >, broker::broker_options, broker::endpoint::clock*)::{lambda(caf::stream<broker::node_message> const&, std::vector<broker::topic, std::allocator<broker::topic> >&, caf::actor&)#8}::operator()(caf::stream<broker::node_message> const&, std::vector<broker::topic, std::allocator<broker::topic> >&, caf::actor&) const::{lambda()#1}::operator()() const], $expected);
my $expected = q[broker::detail::network_cache::fetch<>()::{lambda()}::~fetch]                                                                            ; compress_demangled_name(q[broker::detail::network_cache::fetch<broker::core_state::emit_peer_added_status(caf::actor, char const*)::{lambda(broker::network_info)#2}, broker::core_state::emit_peer_added_status(caf::actor, char const*)::{lambda(caf::error)#3}>(caf::actor const&, broker::core_state::emit_peer_added_status(caf::actor, char const*)::{lambda(broker::network_info)#2}, broker::core_state::emit_peer_added_status(caf::actor, char const*)::{lambda(caf::error)#3})::{lambda(broker::core_state::emit_peer_added_status(caf::actor, char const*)::{lambda(broker::network_info)#2}&)#2}::~fetch()], $expected);
my $expected = q[std::transform<>]                                                                                                                        ; compress_demangled_name(q[__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > std::transform<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int (*)(int) noexcept>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int (*)(int) noexcept)], $expected);
my $expected = q[std::caf::default_sum_type_access<>::get<>]                                                                                              ; compress_demangled_name(q[std::vector<broker::data, std::allocator<broker::data> >& caf::default_sum_type_access<caf::variant<broker::none, bool, unsigned long, long, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, broker::address, broker::subnet, broker::port, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, broker::enum_value, std::set<broker::data, std::less<broker::data>, std::allocator<broker::data> >, std::map<broker::data, broker::data, std::less<broker::data>, std::allocator<std::pair<broker::data const, broker::data> > >, std::vector<broker::data, std::allocator<broker::data> > > >::get<std::vector<broker::data, std::allocator<broker::data> >, 14>(caf::variant<broker::none, bool, unsigned long, long, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, broker::address, broker::subnet, broker::port, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, broker::enum_value, std::set<broker::data, std::less<broker::data>, std::allocator<broker::data> >, std::map<broker::data, broker::data, std::less<broker::data>, std::allocator<std::pair<broker::data const, broker::data> > >, std::vector<broker::data, std::allocator<broker::data> > >&, caf::sum_type_token<std::vector<broker::data, std::allocator<broker::data> >, 14>)], $expected);
my $expected = q[std::forward_as_tuple<>]                                                                                                                 ; compress_demangled_name(q[std::tuple<broker::store::request<broker::data, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data>(caf::atom_constant<(caf::atom_value)4115129> const&, broker::data&&, broker::data&&) const::{lambda(broker::data&)#1}&&, broker::store::request<broker::data, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data>(caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&) const::{lambda(caf::error&)#2}&&> std::forward_as_tuple<broker::store::request<broker::data, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data>(caf::atom_constant<(caf::atom_value)4115129> const&, broker::data&&, broker::data&&) const::{lambda(broker::data&)#1}, broker::store::request<broker::data, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data>(caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&) const::{lambda(caf::error&)#2}>(broker::store::request<broker::data, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data>(caf::atom_constant<(caf::atom_value)4115129> const&, broker::data&&, broker::data&&) const::{lambda(broker::data&)#1}, broker::store::request<broker::data, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data>(caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&, caf::atom_constant<(caf::atom_value)4115129> const&, broker::data, broker::data&&) const::{lambda(caf::error&)#2})], $expected);
my $expected = q[caf::io::middleman::remote_group()::{lambda()}::operator()()::{lambda()}::operator()()::{lambda()}::operator()()::{lambda()}::operator()]; compress_demangled_name(q[caf::io::middleman::remote_group(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned short)::{lambda(caf::event_based_actor*, caf::typed_actor<caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)69675774307885>, unsigned short, caf::intrusive_ptr<caf::actor_control_block>, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool>, caf::output_tuple<unsigned short> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)265509555>, unsigned short, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool>, caf::output_tuple<unsigned short> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)68776180492857>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned short>, caf::output_tuple<caf::node_id, caf::intrusive_ptr<caf::actor_control_block>, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)286769531740155437>, caf::actor_addr, unsigned short>, caf::output_tuple<void> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)16790277674>, unsigned short>, caf::output_tuple<void> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)17059704627>, caf::node_id, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, caf::message, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, caf::output_tuple<caf::intrusive_ptr<caf::actor_control_block> > >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)4115129>, caf::node_id>, caf::output_tuple<caf::node_id, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned short> > >)#1}::operator()(caf::event_based_actor*, caf::typed_actor<caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)69675774307885>, unsigned short, caf::intrusive_ptr<caf::actor_control_block>, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool>, caf::output_tuple<unsigned short> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)265509555>, unsigned short, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool>, caf::output_tuple<unsigned short> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)68776180492857>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned short>, caf::output_tuple<caf::node_id, caf::intrusive_ptr<caf::actor_control_block>, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)286769531740155437>, caf::actor_addr, unsigned short>, caf::output_tuple<void> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)16790277674>, unsigned short>, caf::output_tuple<void> >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)17059704627>, caf::node_id, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, caf::message, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, caf::output_tuple<caf::intrusive_ptr<caf::actor_control_block> > >, caf::typed_mpi<caf::detail::type_list<caf::atom_constant<(caf::atom_value)4115129>, caf::node_id>, caf::output_tuple<caf::node_id, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned short> > >) const::{lambda(caf::atom_constant<(caf::atom_value)4115129>)#1}::operator()(caf::atom_constant<(caf::atom_value)4115129>) const::{lambda(caf::node_id const&, caf::intrusive_ptr<caf::actor_control_block>&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)#1}::operator()({lambda(caf::atom_constant<(caf::atom_value)4115129>)#1}, caf::node_id const, caf::intrusive_ptr<caf::actor_control_block>&)::{lambda(caf::group&)#1}::operator()({lambda(caf::node_id const&, caf::intrusive_ptr<caf::actor_control_block>&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)#1})], $expected);
my $expected = q[std::_Tuple_impl<>::_Tuple_impl<>]                                                                                                       ; compress_demangled_name(q[std::_Tuple_impl<6ul, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::connection_handle)#8}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::io::acceptor_closed_msg const&)#9}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)69675774307885>, caf::intrusive_ptr<caf::io::doorman>&, unsigned short, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::actor_control_block> const&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::char_traits>, std::allocator<std::char_traits> >&)#11}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda({lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::io::scribe>&, unsigned short, caf::actor_control_block, std::less<std::char_traits>)#12}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)68776180492857>, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)69675774307885>, caf::intrusive_ptr<caf::io::doorman>&, unsigned short, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::actor_control_block> const&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::char_traits>, std::allocator<std::char_traits> >&)#11}, unsigned short)#13}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::node_id const&, unsigned long)#14}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::atom_constant<(caf::atom_value)68776180492857>, unsigned long, caf::error&)#15}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)286769531740155437>, caf::actor_addr const&, unsigned short)#16}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)16790277674>, unsigned short)#17}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)4115129>, caf::atom_constant<(caf::atom_value)68776180492857>)#18}>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)266791472>, unsigned long)#19}> >::_Tuple_impl<{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::connection_handle)#8}, caf::io::acceptor_closed_msg const&, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::io::acceptor_closed_msg const&)#9}>, std::allocator<std::char_traits>, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)69675774307885>, caf::intrusive_ptr<caf::io::doorman>&, unsigned short, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::actor_control_block> const&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::char_traits>, std::allocator<std::char_traits> >&)#11}>, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::io::scribe>&, {lambda(caf::atom_constant<(caf::atom_value)68776180492857>, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)69675774307885>, caf::intrusive_ptr<caf::io::doorman>&, unsigned short, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::actor_control_block> const&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::char_traits>, std::allocator<std::char_traits> >&)#11}, unsigned short)#13}, caf::node_id const, caf::error&, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::atom_constant<(caf::atom_value)68776180492857>, unsigned long, caf::error&)#15}>, caf::actor_addr const, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)286769531740155437>, caf::actor_addr const&, unsigned short)#16}, void>({lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::connection_handle)#8}&&, caf::io::acceptor_closed_msg const&, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::io::acceptor_closed_msg const&)#9}>&&, std::allocator<std::char_traits>&&, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)69675774307885>, caf::intrusive_ptr<caf::io::doorman>&, unsigned short, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::actor_control_block> const&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::char_traits>, std::allocator<std::char_traits> >&)#11}>&&, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::io::scribe>&, {lambda(caf::atom_constant<(caf::atom_value)68776180492857>, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)69675774307885>, caf::intrusive_ptr<caf::io::doorman>&, unsigned short, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::io::accept_handle)#10}<caf::actor_control_block> const&, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::char_traits>, std::allocator<std::char_traits> >&)#11}, unsigned short)#13}&&, caf::node_id const&&, caf::error&, caf::trivial_match_case<caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)1075533229674>, caf::atom_constant<(caf::atom_value)68776180492857>, unsigned long, caf::error&)#15}>&&, caf::actor_addr const&&, caf::io::basp_broker::make_behavior()::{lambda(caf::atom_constant<(caf::atom_value)286769531740155437>, caf::actor_addr const&, unsigned short)#16}&&)], $expected);

done_testing();

